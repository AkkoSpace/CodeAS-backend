name: CI Pipeline

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

env:
  JAVA_VERSION: '21'
  MAVEN_OPTS: '-Xmx1024m'

jobs:
  test:
    name: 🧪 Test & Quality Check
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write
      pull-requests: write

    # 使用内存数据库进行测试，不需要外部服务

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: ☕ Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven

    - name: 🔍 Verify Maven version
      run: mvn --version

    - name: 📦 Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: 🧹 Clean and compile
      run: mvn clean compile

    - name: 🧪 Run tests
      run: mvn test -Dspring.profiles.active=test
      env:
        SPRING_PROFILES_ACTIVE: test

    - name: 📊 Generate test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Maven Tests
        path: target/surefire-reports/*.xml
        reporter: java-junit

    - name: 📈 Upload coverage to Codecov
      if: success()
      uses: codecov/codecov-action@v4
      with:
        file: target/site/jacoco/jacoco.xml
        flags: unittests
        name: codecov-umbrella

  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: ☕ Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven

    - name: 🏗️ Build application
      run: mvn clean package -DskipTests

    - name: 📦 Create distribution package
      run: mvn assembly:single

    - name: 📤 Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: application-jar
        path: target/*.jar
        retention-days: 30

    - name: 📤 Upload distribution package
      uses: actions/upload-artifact@v4
      with:
        name: distribution-package
        path: target/*-distribution.tar.gz
        retention-days: 30

  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: ☕ Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven

    - name: 🔍 Run dependency check
      run: mvn org.owasp:dependency-check-maven:check

    - name: 📤 Upload security report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-report
        path: target/dependency-check-report.html
        retention-days: 30

  docker:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔑 Log in to GitHub Container Registry
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 📥 Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: application-jar
        path: target/

    - name: 🏷️ Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: 🏗️ Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: docker/Dockerfile
        push: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
