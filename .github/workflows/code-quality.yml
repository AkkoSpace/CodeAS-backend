name: Code Quality Analysis

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

env:
  JAVA_VERSION: '21'

jobs:
  code-quality:
    name: 📊 Code Quality Analysis
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # SonarCloud需要完整历史

    - name: ☕ Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven

    - name: 📦 Cache SonarCloud packages
      uses: actions/cache@v4
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    - name: 🧪 Run tests with coverage
      run: mvn clean verify -Dspring.profiles.active=test

    - name: 📊 SonarCloud Scan
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        echo "🔍 开始SonarCloud代码质量扫描..."

        # 检查SONAR_TOKEN是否配置
        if [ -z "$SONAR_TOKEN" ]; then
          echo "❌ SONAR_TOKEN未配置，跳过SonarCloud扫描"
          echo "请在GitHub Secrets中配置SONAR_TOKEN"
          exit 1
        fi

        echo "✅ SONAR_TOKEN已配置"
        echo "📋 SonarCloud配置信息:"
        echo "  项目Key: AkkoSpace_CodeAS-backend"
        echo "  组织: akkospace"
        echo "  主机: https://sonarcloud.io"

        # 检查覆盖率报告是否存在
        if [ -f "target/site/jacoco/jacoco.xml" ]; then
          echo "✅ 找到JaCoCo覆盖率报告"
          COVERAGE_PARAM="-Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml"
        else
          echo "⚠️ 未找到JaCoCo覆盖率报告，跳过覆盖率分析"
          COVERAGE_PARAM=""
        fi

        # 执行SonarCloud扫描
        echo "🚀 执行SonarCloud扫描..."
        mvn sonar:sonar \
          -Dsonar.projectKey=AkkoSpace_CodeAS-backend \
          -Dsonar.organization=akkospace \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.projectName="CodeAS Backend" \
          -Dsonar.projectVersion=1.0.0 \
          -Dsonar.sources=src/main/java \
          -Dsonar.tests=src/test/java \
          -Dsonar.java.binaries=target/classes \
          -Dsonar.java.test.binaries=target/test-classes \
          $COVERAGE_PARAM \
          -X || {
            echo "❌ SonarCloud扫描失败"
            echo "可能的原因:"
            echo "1. SONAR_TOKEN权限不足"
            echo "2. SonarCloud项目配置错误"
            echo "3. 网络连接问题"
            echo "4. Maven配置问题"
            exit 1
          }

        echo "✅ SonarCloud扫描完成"

    - name: 📈 Upload coverage reports
      uses: codecov/codecov-action@v5
      with:
        file: target/site/jacoco/jacoco.xml
        flags: unittests
        name: codecov-umbrella


