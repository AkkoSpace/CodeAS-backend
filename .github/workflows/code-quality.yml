name: Code Quality & Security

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]
  schedule:
    # 每周一凌晨2点运行安全扫描
    - cron: '0 2 * * 1'

env:
  JAVA_VERSION: '21'

jobs:
  code-quality:
    name: 📊 Code Quality Analysis
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # SonarCloud需要完整历史

    - name: ☕ Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven

    - name: 📦 Cache SonarCloud packages
      uses: actions/cache@v4
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    - name: 🧪 Run tests with coverage
      run: mvn clean verify

    - name: 📊 SonarCloud Scan
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        echo "🔍 开始SonarCloud代码质量扫描..."

        # 检查SONAR_TOKEN是否配置
        if [ -z "$SONAR_TOKEN" ]; then
          echo "❌ SONAR_TOKEN未配置，跳过SonarCloud扫描"
          echo "请在GitHub Secrets中配置SONAR_TOKEN"
          exit 1
        fi

        echo "✅ SONAR_TOKEN已配置"
        echo "📋 SonarCloud配置信息:"
        echo "  项目Key: AkkoSpace_CodeAS-backend"
        echo "  组织: akkospace"
        echo "  主机: https://sonarcloud.io"

        # 检查覆盖率报告是否存在
        if [ -f "target/site/jacoco/jacoco.xml" ]; then
          echo "✅ 找到JaCoCo覆盖率报告"
          COVERAGE_PARAM="-Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml"
        else
          echo "⚠️ 未找到JaCoCo覆盖率报告，跳过覆盖率分析"
          COVERAGE_PARAM=""
        fi

        # 执行SonarCloud扫描
        echo "🚀 执行SonarCloud扫描..."
        mvn sonar:sonar \
          -Dsonar.projectKey=AkkoSpace_CodeAS-backend \
          -Dsonar.organization=akkospace \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.projectName="CodeAS Backend" \
          -Dsonar.projectVersion=1.0.0 \
          -Dsonar.sources=src/main/java \
          -Dsonar.tests=src/test/java \
          -Dsonar.java.binaries=target/classes \
          -Dsonar.java.test.binaries=target/test-classes \
          $COVERAGE_PARAM \
          -X || {
            echo "❌ SonarCloud扫描失败"
            echo "可能的原因:"
            echo "1. SONAR_TOKEN权限不足"
            echo "2. SonarCloud项目配置错误"
            echo "3. 网络连接问题"
            echo "4. Maven配置问题"
            exit 1
          }

        echo "✅ SonarCloud扫描完成"

    - name: 📈 Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: target/site/jacoco/jacoco.xml
        flags: unittests
        name: codecov-umbrella

  security-scan:
    name: 🔒 Security Vulnerability Scan
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: ☕ Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven

    - name: 🔍 OWASP Dependency Check
      env:
        NVD_API_KEY: ${{ secrets.NVD_API_KEY }}
        SKIP_NVD_UPDATE: ${{ secrets.NVD_API_KEY == '' && 'true' || 'false' }}
      run: |
        mvn clean compile dependency-check:check \
          -DfailBuildOnCVSS=7

    - name: 📤 Upload OWASP report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: owasp-dependency-check-report
        path: target/dependency-check-report.html
        retention-days: 30

    - name: 🔒 Run Snyk security scan
      uses: snyk/actions/maven@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high --sarif-file-output=snyk.sarif

    - name: 📤 Upload Snyk report
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('snyk.sarif') != ''
      with:
        sarif_file: snyk.sarif

  license-check:
    name: 📄 License Compliance Check
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: ☕ Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven

    - name: 📄 Check licenses
      run: |
        # 验证项目LICENSE文件存在
        if [ ! -f "LICENSE" ]; then
          echo "❌ 项目缺少LICENSE文件"
          exit 1
        else
          echo "✅ 项目LICENSE文件存在"
        fi

        # 显示LICENSE文件信息
        echo "📄 LICENSE文件信息:"
        head -3 LICENSE

        echo "✅ 许可证检查完成 - 项目合规，代码保持简洁"

    - name: 📊 Generate license summary
      run: |
        # 生成简单的许可证摘要
        echo "📋 项目许可证摘要:" > license-summary.txt
        echo "项目名称: CodeAS Backend" >> license-summary.txt
        echo "许可证类型: MIT License" >> license-summary.txt
        echo "版权所有者: AkkoSpace (2025)" >> license-summary.txt
        echo "许可证文件: LICENSE" >> license-summary.txt
        echo "" >> license-summary.txt
        echo "✅ 项目遵循MIT开源许可证" >> license-summary.txt

        cat license-summary.txt

    - name: 📤 Upload license summary
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: license-summary
        path: license-summary.txt
        retention-days: 30

  performance-test:
    name: ⚡ Performance Test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: codeas
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test123
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: ☕ Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven

    - name: 🏗️ Build application
      run: mvn clean package -DskipTests

    - name: 🚀 Start application
      run: |
        echo "🚀 启动应用程序..."

        # 检查JAR文件是否存在
        if ls target/*.jar 1> /dev/null 2>&1; then
          JAR_FILE=$(ls target/*.jar | head -1)
          echo "找到JAR文件: $JAR_FILE"
        else
          echo "❌ 未找到JAR文件"
          ls -la target/
          exit 1
        fi

        # 为CI环境创建.env.test.local文件
        echo "📝 创建CI环境配置文件..."
        echo "# CI性能测试环境配置" > .env.test.local
        echo "SERVER_PORT=26300" >> .env.test.local
        echo "DB_HOST=localhost" >> .env.test.local
        echo "DB_PORT=5432" >> .env.test.local
        echo "DB_USERNAME=test" >> .env.test.local
        echo "DB_PASSWORD=test123" >> .env.test.local
        echo "REDIS_HOST=localhost" >> .env.test.local
        echo "REDIS_PORT=6379" >> .env.test.local
        echo "REDIS_PASSWORD=\"\"" >> .env.test.local
        echo "JWT_SECRET=dGVzdC1qd3Qtc2VjcmV0LWZvci1wZXJmb3JtYW5jZS10ZXN0" >> .env.test.local
        echo "ADMIN_USERNAME=admin" >> .env.test.local
        echo "ADMIN_PASSWORD=admin123" >> .env.test.local

        echo "✅ CI环境配置文件已创建"
        echo "📋 .env.test.local文件内容:"
        cat .env.test.local

        # 启动应用程序，使用测试专用配置和明确的环境变量
        echo "启动命令: java -jar $JAR_FILE --spring.profiles.active=test"

        echo "📋 环境变量设置:"
        echo "DB_HOST=$DB_HOST"
        echo "DB_PORT=$DB_PORT"
        echo "DB_NAME=$DB_NAME"
        echo "DB_USERNAME=$DB_USERNAME"
        echo "SERVER_PORT=$SERVER_PORT"

        nohup java -jar "$JAR_FILE" \
          --spring.profiles.active=test \
          > app.log 2>&1 &

        APP_PID=$!
        echo "APP_PID=$APP_PID" >> $GITHUB_ENV
        echo "应用程序PID: $APP_PID"

        # 等待应用启动，增加更详细的检查
        echo "⏳ 等待应用程序启动..."
        for i in {1..30}; do
          echo "检查应用状态 ($i/30)..."

          # 检查进程是否还在运行
          if ! kill -0 $APP_PID 2>/dev/null; then
            echo "❌ 应用程序进程已停止"
            echo "📋 应用程序日志:"
            cat app.log
            exit 1
          fi

          # 检查端口是否监听
          if netstat -tuln | grep -q ":26300 "; then
            echo "✅ 端口26300已监听"

            # 尝试健康检查
            if curl -f -s http://localhost:26300/actuator/health > /dev/null 2>&1; then
              echo "✅ 应用程序启动成功！"
              break
            else
              echo "⏳ 健康检查未通过，继续等待..."
            fi
          else
            echo "⏳ 端口26300未监听，继续等待..."
          fi

          sleep 10
        done

        # 最终检查
        if ! curl -f -s http://localhost:26300/actuator/health > /dev/null 2>&1; then
          echo "❌ 应用程序启动失败"
          echo "📋 应用程序日志:"
          cat app.log
          exit 1
        fi
      env:
        SERVER_PORT: 26300
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: codeas
        DB_USERNAME: test
        DB_PASSWORD: test123
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        REDIS_PASSWORD: ""
        JWT_SECRET: dGVzdC1qd3Qtc2VjcmV0LWZvci1wZXJmb3JtYW5jZS10ZXN0
        ADMIN_USERNAME: admin
        ADMIN_PASSWORD: admin123

    - name: ⚡ Run performance tests
      run: |
        echo "🧪 开始性能测试..."

        # 安装Apache Bench
        sudo apt-get update -qq
        sudo apt-get install -y apache2-utils

        # 基础健康检查测试
        echo "📊 测试健康检查端点..."
        if curl -f -s http://localhost:26300/actuator/health; then
          echo "✅ 健康检查端点正常"
        else
          echo "❌ 健康检查端点失败"
          exit 1
        fi

        # 使用Apache Bench进行基础性能测试
        echo "🚀 执行Apache Bench性能测试..."
        ab -n 100 -c 5 http://localhost:26300/actuator/health || {
          echo "⚠️ Apache Bench测试失败，使用curl替代测试"

          # 使用curl进行简单的并发测试
          echo "🔄 使用curl进行响应时间测试..."
          for i in {1..10}; do
            start_time=$(date +%s%N)
            if curl -f -s http://localhost:26300/actuator/health > /dev/null; then
              end_time=$(date +%s%N)
              duration=$(( (end_time - start_time) / 1000000 ))
              echo "请求 $i: ${duration}ms"
            else
              echo "请求 $i: 失败"
            fi
          done
        }

        # 测试其他端点（如果存在）
        echo "🔍 测试其他可用端点..."
        for endpoint in "/actuator/info" "/actuator/metrics"; do
          echo "测试端点: $endpoint"
          if curl -f -s "http://localhost:26300$endpoint" > /dev/null 2>&1; then
            echo "✅ $endpoint 可用"
          else
            echo "⚠️ $endpoint 不可用或未配置"
          fi
        done

        echo "✅ 性能测试完成"

    - name: 🛑 Stop application
      if: always()
      run: |
        echo "🛑 停止应用程序..."
        if [ ! -z "$APP_PID" ]; then
          echo "停止PID: $APP_PID"
          kill $APP_PID || true
          sleep 2
          # 强制停止（如果需要）
          kill -9 $APP_PID 2>/dev/null || true
          echo "✅ 应用程序已停止"
        else
          echo "⚠️ 未找到应用程序PID"
        fi

        # 显示最终的应用日志（如果存在）
        if [ -f "app.log" ]; then
          echo "📋 应用程序最终日志（最后20行）:"
          tail -20 app.log
        fi
