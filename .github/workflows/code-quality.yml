name: Code Quality & Security

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]
  schedule:
    # 每周一凌晨2点运行安全扫描
    - cron: '0 2 * * 1'

env:
  JAVA_VERSION: '21'

jobs:
  code-quality:
    name: 📊 Code Quality Analysis
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # SonarCloud需要完整历史

    - name: ☕ Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven

    - name: 📦 Cache SonarCloud packages
      uses: actions/cache@v4
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    - name: 🧪 Run tests with coverage
      run: mvn clean verify

    - name: 📊 SonarCloud Scan
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        mvn sonar:sonar \
          -Dsonar.projectKey=AkkoSpace_CodeAS-backend \
          -Dsonar.organization=akkospace \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml

    - name: 📈 Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: target/site/jacoco/jacoco.xml
        flags: unittests
        name: codecov-umbrella

  security-scan:
    name: 🔒 Security Vulnerability Scan
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: ☕ Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven

    - name: 🔍 OWASP Dependency Check
      env:
        NVD_API_KEY: ${{ secrets.NVD_API_KEY }}
        SKIP_NVD_UPDATE: ${{ secrets.NVD_API_KEY == '' && 'true' || 'false' }}
      run: |
        mvn clean compile dependency-check:check \
          -DfailBuildOnCVSS=7

    - name: 📤 Upload OWASP report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: owasp-dependency-check-report
        path: target/dependency-check-report.html
        retention-days: 30

    - name: 🔒 Run Snyk security scan
      uses: snyk/actions/maven@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high --sarif-file-output=snyk.sarif

    - name: 📤 Upload Snyk report
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('snyk.sarif') != ''
      with:
        sarif_file: snyk.sarif

  license-check:
    name: 📄 License Compliance Check
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: ☕ Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven

    - name: 📄 Check licenses
      run: |
        # 生成第三方依赖许可证报告
        mvn license:aggregate-add-third-party

        # 检查源代码文件的许可证头
        mvn license:check

    - name: 📊 Generate license report
      run: |
        # 生成详细的许可证报告
        mvn license:aggregate-third-party-report

    - name: 📤 Upload license report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: license-report
        path: |
          target/generated-sources/license/THIRD-PARTY.txt
          target/site/aggregate-third-party-report.html
        retention-days: 30

  performance-test:
    name: ⚡ Performance Test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: codeas_perf
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test123
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: ☕ Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven

    - name: 🏗️ Build application
      run: mvn clean package -DskipTests

    - name: 🚀 Start application
      run: |
        java -jar target/*.jar &
        APP_PID=$!
        echo "APP_PID=$APP_PID" >> $GITHUB_ENV
        
        # 等待应用启动
        for i in {1..30}; do
          if curl -f http://localhost:26300/actuator/health; then
            echo "Application started successfully"
            break
          fi
          echo "Waiting for application to start... ($i/30)"
          sleep 10
        done
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: codeas_perf
        DB_USERNAME: test
        DB_PASSWORD: test123
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        JWT_SECRET: dGVzdC1qd3Qtc2VjcmV0LWZvci1wZXJmb3JtYW5jZS10ZXN0

    - name: ⚡ Run performance tests
      run: |
        # 使用Apache Bench进行基础性能测试
        ab -n 1000 -c 10 http://localhost:26300/actuator/health
        
        # 使用curl进行API响应时间测试
        for endpoint in "/actuator/health" "/actuator/info"; do
          echo "Testing $endpoint"
          curl -w "@.github/curl-format.txt" -o /dev/null -s "http://localhost:26300$endpoint"
        done

    - name: 🛑 Stop application
      if: always()
      run: |
        if [ ! -z "$APP_PID" ]; then
          kill $APP_PID || true
        fi
