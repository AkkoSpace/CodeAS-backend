name: Deploy to Environment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      version:
        description: 'Version to deploy (leave empty for latest)'
        required: false
        type: string

  # 暂时禁用自动部署，等服务器配置完成后再启用
  # push:
  #   branches:
  #     - dev
  #   paths-ignore:
  #     - 'docs/**'
  #     - '*.md'
  #     - '.gitignore'

env:
  JAVA_VERSION: '21'

jobs:
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: ${{ vars.STAGING_URL || 'http://localhost:26300' }}

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: ☕ Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven

    - name: 🏗️ Build application
      run: |
        mvn clean package -DskipTests
        mvn assembly:single

    - name: 🐳 Build Docker image
      run: |
        docker build -f docker/Dockerfile -t codeas-backend:staging .

    - name: 🔑 Configure SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.STAGING_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.STAGING_HOST }} >> ~/.ssh/known_hosts

    - name: 📤 Deploy to staging server
      run: |
        # 上传Docker镜像
        docker save codeas-backend:staging | gzip | ssh ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }} 'docker load'
        
        # 部署应用
        ssh ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }} << 'EOF'
          cd /opt/codeas
          docker-compose -f docker-compose.staging.yml down
          docker-compose -f docker-compose.staging.yml up -d
        EOF

    - name: 🏥 Health check
      run: |
        sleep 30
        curl -f ${{ vars.STAGING_URL }}/actuator/health || exit 1

    - name: 📢 Notify deployment
      if: always() && secrets.SLACK_WEBHOOK != ''
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow

  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'
    environment:
      name: production
      url: ${{ vars.PRODUCTION_URL || 'http://localhost:26300' }}

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        ref: main

    - name: ☕ Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven

    - name: 🏗️ Build application
      run: |
        mvn clean package -DskipTests
        mvn assembly:single

    - name: 🐳 Build Docker image
      run: |
        VERSION=${{ github.event.inputs.version || github.sha }}
        docker build -f docker/Dockerfile -t codeas-backend:$VERSION .
        docker tag codeas-backend:$VERSION codeas-backend:latest

    - name: 🔑 Configure SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.PRODUCTION_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.PRODUCTION_HOST }} >> ~/.ssh/known_hosts

    - name: 💾 Backup current version
      run: |
        ssh ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
          cd /opt/codeas
          docker-compose exec backend ./bin/backup.sh
        EOF

    - name: 📤 Deploy to production server
      run: |
        VERSION=${{ github.event.inputs.version || github.sha }}
        
        # 上传Docker镜像
        docker save codeas-backend:$VERSION | gzip | ssh ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} 'docker load'
        
        # 部署应用
        ssh ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << EOF
          cd /opt/codeas
          export IMAGE_TAG=$VERSION
          docker-compose -f docker-compose.prod.yml down
          docker-compose -f docker-compose.prod.yml up -d
        EOF

    - name: 🏥 Health check
      run: |
        sleep 60
        for i in {1..10}; do
          if curl -f ${{ vars.PRODUCTION_URL }}/actuator/health; then
            echo "Health check passed"
            exit 0
          fi
          echo "Health check attempt $i failed, retrying..."
          sleep 30
        done
        echo "Health check failed after 10 attempts"
        exit 1

    - name: 🔄 Rollback on failure
      if: failure()
      run: |
        ssh ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
          cd /opt/codeas
          ./bin/rollback.sh
        EOF

    - name: 📢 Notify deployment
      if: always() && secrets.SLACK_WEBHOOK != ''
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow

  create-release:
    name: 📦 Create Release
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production' && success()
    needs: deploy-production

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🏷️ Create release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.event.inputs.version || github.run_number }}
        release_name: Release v${{ github.event.inputs.version || github.run_number }}
        body: |
          ## 🚀 Production Deployment
          
          **Version:** ${{ github.event.inputs.version || github.sha }}
          **Environment:** Production
          **Deployed at:** ${{ github.event.head_commit.timestamp }}
          
          ### Changes
          ${{ github.event.head_commit.message }}
          
          ### Health Check
          ✅ Application is healthy and running
        draft: false
        prerelease: false
